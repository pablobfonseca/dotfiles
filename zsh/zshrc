[ -f "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env" # ghcup-env

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ "$UNAME_MACHINE" = "arm64" ]; then
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
else
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

autoload -U compinit
compinit

eval "$(dotfiles completion zsh)"; compdef _dotfiles dotfiles

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

export ZPLUG_HOME=$(brew --prefix zplug)
source $ZPLUG_HOME/init.zsh

zplug "zsh-users/zsh-autosuggestions"
zplug "b4b4r07/enhancd", use:init.sh, defer:2

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
printf "Install? [y/N]: "
if read -q; then
echo; zplug install
fi
fi

# Then, source plugins and add commands to $PATH
zplug load

if [ -n "$HTTP_TOOLKIT_ACTIVE" ]; then
# When HTTP Toolkit is active, we inject various overrides into PATH
export PATH="$HOME/.local/share/httptoolkit-server/client/1.0.2/overrides/path:$PATH"

if command -v winpty >/dev/null 2>&1; then
# Work around for winpty's hijacking of certain commands
alias php=php
alias node=node
fi
fi

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

autoload -U add-zsh-hook
load-nvmrc() {
local node_version="$(nvm version)"
local nvmrc_path="$(nvm_find_nvmrc)"

if [ -n "$nvmrc_path" ]; then
local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

if [ "$nvmrc_node_version" = "N/A" ]; then
nvm install
elif [ "$nvmrc_node_version" != "$node_version" ]; then
nvm use
fi
elif [ "$node_version" != "$(nvm version default)" ]; then
echo "Reverting to nvm default version"
nvm use default
fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

function search_route {
bin/rails routes | rg $1
}

function vimup {
nvim +Lazy
}

function bundle_search() {
pattern="$1"; shift
ag $pattern $(bundle show --paths "$@")
}

function take {
mkdir $1
cd $1
}

rvmlist() {
local rb
rb=$((echo system; rvm list | grep ruby | cut -c 4-) |
awk '{print $1}' |
fzf) && rvm use $rb
}


nvmlist() {
local njs
njs=$((nvm ls --no-colors --no-alias | cut -c 8-) | awk '{print $1}' | fzf-tmux -p) && nvm use $njs
}

function branch_clean() {
git checkout master && git branch --merged | grep -v master | xargs git branch -d
}

docker_rmi() {
local image
image=$(docker images | awk '(NR>1) { print $1 " " $3; }' | fzf-tmux -p) \
&& docker rmi $(cut -d' ' -f2 <<< "$image") --force
}

docker_attach() {
local container
container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf-tmux -p) \
&& docker attach $(cut -d' ' -f1 <<< "$container")
}

docker_stop() {
local container
container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf-tmux -p) \
&& docker stop $(cut -d' ' -f1 <<< "$container")
}

alias heic_to_png="magick mogrify -monitor -format png *.HEIC"

alias lazydocker="upscope lazydocker"

find_file() {
fd --type f --hidden --exclude .git | fzf-tmux | xargs nvim
}

zle -N find_file
bindkey "^P" find_file

bindkey "^R" history-incremental-search-backward

alias path="echo $PATH | tr -s ':' '\n'"
alias reload!="source ~/.zshrc"
alias brew_update="brew update && brew upgrade && brew cleanup"
alias code="cd ~/code && cd"
alias dot="cd ~/.dotfiles && cd"
alias untar="tar -zxvf"
alias genpass="openssl rand -base64 20"
alias st="git st"
alias ls="lsd"
alias ll="ls -alF"
alias bs="git bselect"
alias cat="bat"

# GH
alias copilot="gh copilot"
alias gcs="gh copilot suggest"
alias gce="gh copilot explain"

eval "$(op completion zsh)"; compdef _op op

eval "$(starship init zsh)"

# tmux
tlist() {
local tmux_session
  tmux_session=$(tmux list-sessions -F "#{session_name}" | fzf --prompt="Switch: ")
  if [ -n "$TMUX" ]; then
    tmux switch-client -t "$tmux_session"
  else
    tmux attach-session -t "$tmux_session"
  fi
}

tkill() {
  local tmux_session
  tmux_session=$(tmux list-sessions -F "#{session_name}" | fzf --prompt="Kill: ")

if [ -n "$tmux_session" ]; then
  tmux kill-session -t "$tmux_session"
fi
}

# opam configuration
[[ ! -r /Users/pablobfonseca/.opam/opam-init/init.zsh ]] || source /Users/pablobfonseca/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

eval "$(zoxide init zsh)"