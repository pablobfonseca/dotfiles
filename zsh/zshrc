# Variables
export PATH="/opt/homebrew/sbin:$PATH"
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export HISTSIZE=20000
export SAVEHIST=20000
export DOTFILES=$HOME/.dotfiles
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export CLICOLOR=1
export HISTTIMEFORMAT="%d/%m/%y %T"
export EDITOR=nvim
export BUNDLER_EDITOR=$EDITOR
export VISUAL_EDITOR=$EDITOR
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES # for rails
export UPSCOPE_DIR=$HOME/code/upscope
export DOCKERMACHINE_IP=$(yq '.docker_machine.ip' $UPSCOPE_DIR/dev.toml)
export PATH="$PATH:$UPSCOPE_DIR/bin"
export PATH="$PATH:$DOTFILES/scripts"
export XDG_CONFIG_HOME="$HOME/.config"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.config/emacs/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/share/nvim/mason/bin:$PATH"
export PATH="$PATH:$HOME/code/roc"

# Make vi-mode transitions faster (KEYTIMEOUT is in hundredths of a second)
export KEYTIMEOUT=1

export ZPLUG_HOME=$(brew --prefix zplug)

# Go
export GOPATH=$HOME/code/go-workspace
export GOROOT=/opt/homebrew/opt/go/libexec
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin

# FZF
export FZF_DEFAULT_COMMAND='fd --hidden --strip-cwd-prefix --exclude .git'
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
# export FZF_DEFAULT_OPTS="--height 50% --layout=default --border --color=hl:#2dd4bf"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_OPTS="--preview 'bat -n --color=always --line-range :500 {}'"
export FZF_CTRL_C_OPTS="--preview 'lsd --tree --color=always {} | head -200'"
export FZF_CTRL_R_OPTS="
   --preview 'echo {}' --preview-window up:3:hidden:wrap
   --bind 'ctrl-/:toggle-preview'
   --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
   --color header:italic
    --header 'Press CTRL-Y to copy command into clipboard'"
# export FZF_TMUX_OPTS=" -p90%,70%"

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"
export PATH="$HOME/.gem/bin:$PATH"
export GEM_HOME=$HOME/.gem

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"

export BAT_THEME=Dracula

export PATH="$HOME/.luarocks/bin:$PATH"

# Pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"

export OBSIDIAN_VAULTS="$HOME/Library/Mobile Documents/iCloud~md~obsidian/Documents/"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# zsh-vi-mode
export ZVM_CURSOR_STYLE_ENABLED=false

# Haskell
# Load GHCup environment
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"
[[ -f "$HOME/.ghcup/env" ]] && source "$HOME/.ghcup/env"

source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

if type brew &>/dev/null
  then
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

    autoload -U compinit && compinit
else
    autoload -U compinit; compinit
fi

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

source $ZPLUG_HOME/init.zsh

zplug "zsh-users/zsh-autosuggestions"
bindkey "^y" autosuggest-accept
zplug "b4b4r07/enhancd", use:init.sh, defer:2
zplug "Aloxaf/fzf-tab"

# fzf-tab
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

# Then, source plugins and add commands to $PATH
zplug load

# This loads fnm
[[ $(command -v "fnm") ]] && eval "$(fnm env --use-on-cd --shell zsh)"

function take {
  mkdir $1
  cd $1
}

rvmlist() {
    local rb
    rb=$((echo system; rvm list | grep ruby | awk '{print $2}') |
    fzf --tmux --prompt "Ruby version: ") && rvm use $rb
}


nvmlist() {
    local njs
    njs=$(fnm list | awk '{print $2}' | fzf --tmux --prompt "Node version: ") && fnm use $njs
}

function branch_clean() {
    git checkout master && git branch --merged | grep -v master | xargs git branch -d
}

docker_rmi() {
    local image
    image=$(docker images | awk '(NR>1) { print $1 " " $3; }' | fzf --tmux) \
    && docker rmi $(cut -d' ' -f2 <<< "$image") --force
}

docker_attach() {
    local container
    container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf --tmux) \
    && docker attach $(cut -d' ' -f1 <<< "$container")
}

docker_stop() {
    local container
    container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf --tmux) \
    && docker stop $(cut -d' ' -f1 <<< "$container")
}

# TODO: check if the service is found
function _ur() {
   local service;
   service="$(yq '.services | keys' $UPSCOPE_DIR/docker-compose.yaml | sed 's/- //' | fzf --tmux --prompt 'Select a service to restart: ')"
   upscope restart -c $service
}

# TODO: check if the service is found
function _ul() {
  local service;
  service="$(yq '.services | keys' $UPSCOPE_DIR/docker-compose.yaml | sed 's/- //' | fzf --tmux --prompt 'Select a service to see the logs: ')"
  upscope logs -c $service
}

open_file() {
  fd --type f --hidden --exclude .git | fzf --tmux --prompt "Open File: " | xargs nvim
}

function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

zle -N open_file
bindkey "^P" open_file

# Aliases

alias heic_to_png="magick mogrify -monitor -format png *.HEIC"
alias lazydocker="upscope lazydocker"
alias path="echo $PATH | tr -s ':' '\n'"
alias reload!="source ~/.zshrc"
alias brew_update="brew update && brew upgrade && brew cleanup"
alias code="cd ~/code && cd"
alias dot="cd ~/.dotfiles && cd"
alias untar="tar -zxvf"
alias genpass="openssl rand -base64 20"
alias st="git st"
alias ls="lsd"
alias ll="lsd -a --color=always --long --git --size=short --icon=always"
alias bs="git bselect"
alias vim="nvim"
alias v="nvim"
alias k="kubectl"
alias ip="curl ifconfig.me"
alias cvim="nvim -u NONE"
alias fman="compgen -c | fzf --tmux --prompt='Search for a command: ' | xargs man"

# GH
alias copilot="gh copilot"
alias gcs="gh copilot suggest"
alias gce="gh copilot explain"

alias mux="tmuxinator"
alias sb="cd $OBSIDIAN_VAULTS"

# ctags
alias ctags="$(brew --prefix ctags)/bin/ctags"

eval "$(op completion zsh)"; compdef _op op
eval "$(starship init zsh)"

# tmux
tlist() {
  local tmux_session
  tmux_session=$(tmux list-windows -a | fzf --tmux --prompt="Switch: " | sed 's/: .*//g')
  if [ -n "$tmux_session" ]; then
    if [ -n "$TMUX" ]; then
      tmux switch-client -t "$tmux_session"
    else
      tmux attach-session -t "$tmux_session"
    fi
  fi
}

muxlist() {
  local project=$(tmuxinator list -n | awk 'NR>1 {print $0}' | fzf --tmux --prompt="Project: ")
  tmuxinator $project
}

emuxlist() {
  local project=$(tmuxinator list -n | awk 'NR>1 {print $0}' | fzf --tmux --prompt="Project to edit: ")
  tmuxinator new $project
}

tkill() {
    local tmux_session
  tmux_session=$(tmux list-sessions -F "#{session_name}" | fzf --tmux --prompt="Kill: ")

  if [ -n "$tmux_session" ]; then
    tmux kill-session -t "$tmux_session"
  fi
}

# FZF
eval "$(fzf --zsh)"
_fzf_compgen_path() {
   fd --hidden --follow --exclude .git . "$1"
}

 # Advanced customization of fzf options via _fzf_comprun function
 # - The first argument to the function is the name of the command.
 # - You should make sure to pass the rest of the arguments to fzf.
 _fzf_comprun() {
   local command=$1
   shift

   case "$command" in
    cd)           fzf --preview 'lsd --tree --color=always {} | head -201' "$@" ;;
     export|unset) fzf --preview "eval 'echo $'{}"         "$@" ;;
     *)            fzf --preview "bat -n --color=always --line-range :499 {}" "$@" ;;
   esac
 }

_fzf_compgen_dir() {
  fd --type=d --hidden --follow --exclude .git . "$1"
}

if [ -d ~/fzf-git.sh ]; then
  source ~/fzf-git.sh/fzf-git.sh
else
  git clone https://github.com/junegunn/fzf-git.sh.git ~/fzf-git.sh
  source ~/fzf-git.sh/fzf-git.sh
fi

function prlist() {
  GH_FORCE_TTY=100% gh pr list --json number,title --template '{{range .}}{{tablerow (printf "%v" .number | autocolor "green") .title}}{{end}}' | \
    fzf --ansi --preview 'GH_FORCE_TTY=100% gh pr view {1}' --preview-window down | \
    awk '{print $1}' | \
    xargs gh pr checkout
}

function dependabot-merge-all() {
  for i in $(gh pr list --limit 100 --json number --json author --jq '.[] | select(.author.login == "app/dependabot") | .number'); do
    echo "Merging PR #$i"
    gh pr review $i --approve
    gh pr merge $i --squash --delete-branch

    # Capture the exit status immediately after the merge command
    merge_status=$?

    if [ $merge_status -ne 0 ]; then
      gh pr comment $i --body "@dependabot recreate"
      echo "Failed to merge PR #$i, will recreate"
    else
      echo "Merged PR #$i"
    fi
  done
}

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
eval "$(zoxide init zsh)"

# fnm
FNM_PATH="$HOME/Library/Application Support/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$HOME/Library/Application Support/fnm:$PATH"
  eval "`fnm env`"
fi

# fnm
FNM_PATH="$HOME/Library/Application Support/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$HOME/Library/Application Support/fnm:$PATH"
  eval "`fnm env`"
fi

# fnm
FNM_PATH="$HOME/Library/Application Support/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$HOME/Library/Application Support/fnm:$PATH"
  eval "`fnm env`"
fi

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
. "$HOME/.deno/env"

# atuin
eval "$(atuin init zsh --disable-up-arrow)"
# keybinding to start atuin in insert mode
bindkey "^r" atuin-search-viins 

# keybinding to start atuin in normal mode
bindkey "^x^n" atuin-search-vicmd # C-x C-n starts atuin in normal mode


# BEGIN opam configuration
# This is useful if you're using opam as it adds:
#   - the correct directories to the PATH
#   - auto-completion for the opam binary
# This section can be safely removed at any time if needed.
[[ ! -r "$HOME/.opam/opam-init/init.zsh" ]] || source "$HOME/.opam/opam-init/init.zsh" > /dev/null 2> /dev/null
# END opam configuration
