# Haskell
# Load GHCup environment
[ -f "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env" # ghcup-env

source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

if type brew &>/dev/null
  then
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

    autoload -U compinit && compinit
else
    autoload -U compinit; compinit
fi

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

source $ZPLUG_HOME/init.zsh

zplug "zsh-users/zsh-autosuggestions"
zplug "b4b4r07/enhancd", use:init.sh, defer:2
zplug "Aloxaf/fzf-tab"

# fzf-tab
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

# Then, source plugins and add commands to $PATH
zplug load

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

autoload -U add-zsh-hook
load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
        nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

function take {
  mkdir $1
  cd $1
}

rvmlist() {
    local rb
    rb=$((echo system; rvm list | grep ruby | cut -c 4-) |
    awk '{print $1}' |
    fzf-tmux -p --prompt "Ruby version: ") && rvm use $rb
}


nvmlist() {
    local njs
    njs=$((nvm ls --no-colors --no-alias | cut -c 8-) | awk '{print $1}' | fzf-tmux -p --prompt "Node version: ") && nvm use $njs
}

function branch_clean() {
    git checkout master && git branch --merged | grep -v master | xargs git branch -d
}

docker_rmi() {
    local image
    image=$(docker images | awk '(NR>1) { print $1 " " $3; }' | fzf-tmux -p) \
    && docker rmi $(cut -d' ' -f2 <<< "$image") --force
}

docker_attach() {
    local container
    container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf-tmux -p) \
    && docker attach $(cut -d' ' -f1 <<< "$container")
}

docker_stop() {
    local container
    container=$(docker ps | awk 'NR>1 { print $1 " " $NF; }' | fzf-tmux -p) \
    && docker stop $(cut -d' ' -f1 <<< "$container")
}

alias heic_to_png="magick mogrify -monitor -format png *.HEIC"

alias lazydocker="upscope lazydocker"

function _ur() {
   local service;
   service="$(yq '.services | keys' $UPSCOPE_DIR/docker-compose.yaml | sed 's/- //' | fzf-tmux --prompt 'Select a service to restart: ')"
   upscope restart -c $service
}

function _ul() {
  local service;
  service="$(yq '.services | keys' $UPSCOPE_DIR/docker-compose.yaml | sed 's/- //' | fzf-tmux --prompt 'Select a service to see the logs: ')"
  upscope logs -c $service
}


find_file() {
  fd --type f --hidden --exclude .git | fzf-tmux -p --prompt "Find File: "
 }

open_file() {
  fd --type f --hidden --exclude .git | fzf-tmux -p --prompt "Open File: " | xargs nvim
}

zle -N find_file
bindkey "^F" find_file

zle -N open_file
bindkey "^P" open_file

# Aliases

alias path="echo $PATH | tr -s ':' '\n'"
alias reload!="source ~/.zshrc"
alias brew_update="brew update && brew upgrade && brew cleanup"
alias code="cd ~/code && cd"
alias dot="cd ~/.dotfiles && cd"
alias untar="tar -zxvf"
alias genpass="openssl rand -base64 20"
alias st="git st"
alias ls="lsd"
alias ll="lsd -a --color=always --long --git --size=short --icon=always"
alias bs="git bselect"
alias vim="nvim"
alias v="nvim"
alias k="kubectl"
alias ip="curl ifconfig.me"
alias cvim="nvim -u NONE"

# GH
alias copilot="gh copilot"
alias gcs="gh copilot suggest"
alias gce="gh copilot explain"

alias mux="tmuxinator"
alias sb="cd $OBSIDIAN_VAULTS"

eval "$(op completion zsh)"; compdef _op op

eval "$(starship init zsh)"

# tmux
tlist() {
local tmux_session
tmux_session=$(tmux list-windows -a | fzf-tmux -p --prompt="Switch: " | sed 's/: .*//g')
  if [ -n "$TMUX" ]; then
    tmux switch-client -t "$tmux_session"
  else
    tmux attach-session -t "$tmux_session"
  fi
}

muxlist() {
  local project=$(tmuxinator list -n | awk 'NR>1 {print $0}' | fzf-tmux -p --prompt="Project: ")
  tmuxinator $project
}

emuxlist() {
  local project=$(tmuxinator list -n | awk 'NR>1 {print $0}' | fzf-tmux -p --prompt="Project to edit: ")
  tmuxinator new $project
}

tkill() {
    local tmux_session
  tmux_session=$(tmux list-sessions -F "#{session_name}" | fzf-tmux -p --prompt="Kill: ")

  if [ -n "$tmux_session" ]; then
    tmux kill-session -t "$tmux_session"
  fi
}

# rust
. "$HOME/.cargo/env"

# opam configuration
[[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

# FZF
source <(fzf --zsh)
_fzf_compgen_path() {
   fd --hidden --follow --exclude .git . "$1"
}

 # Advanced customization of fzf options via _fzf_comprun function
 # - The first argument to the function is the name of the command.
 # - You should make sure to pass the rest of the arguments to fzf.
 _fzf_comprun() {
   local command=$1
   shift

   case "$command" in
    cd)           fzf --preview 'lsd --tree --color=always {} | head -201' "$@" ;;
     export|unset) fzf --preview "eval 'echo $'{}"         "$@" ;;
     *)            fzf --preview "bat -n --color=always --line-range :499 {}" "$@" ;;
   esac
 }

_fzf_compgen_dir() {
  fd --type=d --hidden --follow --exclude .git . "$1"
}

if [ -d ~/fzf-git.sh ]; then
  source ~/fzf-git.sh/fzf-git.sh
else
  git clone https://github.com/junegunn/fzf-git.sh.git ~/fzf-git.sh
  source ~/fzf-git.sh/fzf-git.sh
fi


eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

eval "$(zoxide init zsh)"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
