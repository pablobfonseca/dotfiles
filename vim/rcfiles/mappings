" Emacs-like mappings
nmap <C-x><C-s> :w<cr>
nmap <C-x><C-c> :x<cr>
nmap <C-s> /
" nmap <C-x>b :FzfBuffers<cr>
nmap <C-c>pf :FzfFiles<cr>
nmap <C-x>1 :only<cr>
nmap <C-x>2 :split<cr>
nmap <C-x>3 :vsplit<cr>
nmap <C-x>0 :q<cr>

nnoremap <silent> H :call <SID>show_documentation()<cr>

nnoremap <silent> K :lua require('spectre').open_visual({select_word=true})<CR>

function! s:show_documentation()
  if (index(['vim', 'help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Opens help the word under the cursor
nnoremap <leader>h :exe 'help' expand('<cword>')<cr>

" select last paste in visual mode
nnoremap gp `[v`]

" Change vertically split to horizonally
nnoremap <leader>fh <C-w>t<C-w>K

" Change horizonally split to vertically
nnoremap <leader>fv <C-w>t<C-w>H

" Make Y yank to end of line (like D, or C)
nmap Y y$

" Insert a caller into Ruby code
nnoremap <leader>wtf oputs "#" * 90<c-m>puts caller<c-m>puts "#" * 90<esc>

" Source vimrc
nnoremap <leader>sv :source ~/.vim/vimrc<cr>

" Toggle paste mode on and off
nnoremap <leader>pp :set paste<cr>o<esc>"*]p:set nopaste<cr>

nnoremap ; :

" Indent the whole file
nnoremap <Leader>i mmgg=G`m

" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
nnoremap <space>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
nnoremap <C-x><C-f> :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
nnoremap <space>s :split <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <space>v :vsplit <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <space>r :r <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <space>t :tabe <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <space>sav :sav <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>

" Use j/k to start, then scroll through autocomplete options
inoremap <expr> <C-j> ((pumvisible())?("\<C-n>"):("\<C-x><c-n>"))
inoremap <expr> <C-k> ((pumvisible())?("\<C-p>"):("\<C-x><c-k>"))

" Close the quickfix window
nnoremap <space><space> :ccl<cr>

" Increase and decrease numbers
nnoremap <C-b> <C-a>

" Let's be reasonable, shall we?
nnoremap k gk
nnoremap j gj

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Disable arrows
for prefix in ['i', 'n', 'v']
  for key in ['<Up>', '<Down>', '<Left>', '<Right>']
    exe prefix . 'noremap ' . key . " <Nop>"
  endfor
endfor

" resize panes
nnoremap <silent> <Up> :call animate#window_delta_height(15)<cr>
nnoremap <silent> <Down> :call animate#window_delta_height(-15)<cr>
nnoremap <silent> <Left> :call animate#window_delta_width(30)<cr>
nnoremap <silent> <Right> :call animate#window_delta_width(-30)<cr>

" Scroll the viewport faster
nnoremap <C-e> 7<C-e>
nnoremap <C-y> 7<C-y>
vnoremap <C-e> 7<C-e>
vnoremap <C-y> 7<C-y>

" Disable mouse scroll wheel
nnoremap <ScrollWheelUp> <nop>
nnoremap <S-ScrollWheelUp> <nop>
nnoremap <C-ScrollWheelUp> <nop>
nnoremap <ScrollWheelDown> <nop>
nnoremap <S-ScrollWheelDown> <nop>
nnoremap <C-ScrollWheelDown> <nop>
nnoremap <ScrollWheelLeft> <nop>
nnoremap <S-ScrollWheelLeft> <nop>
nnoremap <C-ScrollWheelLeft> <nop>
nnoremap <ScrollWheelRight> <nop>
nnoremap <S-ScrollWheelRight> <nop>
nnoremap <C-ScrollWheelRight> <nop>

" Open Gemfile
nnoremap <leader>og :e Gemfile<cr>

" Jump to start and end of line using the home row keys
nmap 0 ^

" Tab/shift-tab to indent/outdent in visual mode.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Quickly browse to any tag/symbol in the project
nmap <leader>ot :tag<space>

" Save file as sudo
cmap w!! w !sudo tee % >/dev/null

" Move split to tab
noremap <leader>mt <c-w><s-t>

" Map to increment and decrement
nnoremap + <C-a>
nnoremap - <C-x>
xnoremap + g<C-a>
xnoremap - g<C-x>

" Open Lazygit
nnoremap <leader>tlg :call OpenHTerm('lazygit', 0.8)<cr>
" Open Lazydocker
nnoremap <leader>tld :call OpenHTerm('lazydocker', 0.8)<cr>

" Correct previous misspelled word ( Don't forgot to set spell )
nnoremap <space>sp mm[s1z=`m

"vim:ft=vim
