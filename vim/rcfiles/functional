function! Sorted(l)
    let new_list = deepcopy(a:l)
    call sort(new_list)
    return new_list
endfunction

function! Reversed(l)
    let new_list = deepcopy(a:l)
    call reverse(new_list)
    return new_list
endfunction

function! Append(l, val)
    let new_list = deepcopy(a:l)
    call add(new_list, a:val)
    return new_list
endfunction

function! Assoc(l, i, val)
    let new_list = deepcopy(a:l)
    let new_list[a:i] = a:val
    return new_list
endfunction

function! Pop(l, i)
    let new_list = deepcopy(a:l)
    call remove(new_list, a:i)
    return new_list
endfunction

function! Mapped(list, fn)
    let new_list = deepcopy(a:list)
    let FuncRef = function(a:fn)
    call map(new_list, string(FuncRef) . '(v:val)')
    return new_list
endfunction

function! NewFZFWindow() abort
  new | wincmd J | resize 1
endfunction

" Creates a floating window with a most recent buffer to be used
function! CreateCenteredFloatingWindow()
  if has('nvim')
    let width = float2nr(&columns * 0.8)
    let height = float2nr(&lines * 0.8)
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = '╭' . repeat('─', width - 2) . '╮'
    let mid = '│' . repeat(' ', width - 2) . '│'
    let bot = '╰' . repeat('─', width - 2) . '╯'
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    autocmd BufWipeout <buffer> call CleanupBuffer(s:buf)
    tnoremap <buffer> <silent> <Esc> <C-\><C-n><CR>:call DeleteUnlistedBuffers()<CR>
  endif
endfunction

function! OnTermExit(job_id, code, event) dict
  if has('nvim')
    if a:code == 0
      call DeleteUnlistedBuffers()
    endif
  endif
endfunction

function! DeleteUnlistedBuffers()
  if has('nvim')
    for n in nvim_list_bufs()
      if ! buflisted(n)
        let name = bufname(n)
        if name == '[Scratch]' ||
              \ matchend(name, ':bash') ||
              \ matchend(name, ':zsh')
          call CleanupBuffer(n)
        endif
      endif
    endfor
  endif
endfunction

function! CleanupBuffer(buf)
  if has('nvim')
    if bufexists(a:buf)
      silent execute 'bwipeout! '.a:buf
    endif
  endif
endfunction

function! ToggleTerm(cmd)
  if has('nvim')
    if empty(bufname(a:cmd))
      call CreateCenteredFloatingWindow()
      call termopen(a:cmd, { 'on_exit': function('OnTermExit') })
    else
      call DeleteUnlistedBuffers()
    endif
  endif
endfunction

function! ToggleScratchTerm()
  if has('nvim')
    call ToggleTerm('zsh')
  endif
endfunction
command! ToggleScratchTerm call ToggleScratchTerm()

" When term starts, auto go into insert mode
if has('nvim')
  autocmd TermOpen * startinsert

  " Turn off line numbers etc
  autocmd TermOpen * setlocal listchars= nonumber norelativenumber
endif

" Remove current file - Extracted from tpope's vim-eunuch plugin
command! -bar -bang Remove
      \ let s:file = fnamemodify(bufname(<q-args>),':p') |
      \ execute 'bdelete<bang>' |
      \ if !bufloaded(s:file) && delete(s:file) |
      \   echoerr 'Failed to delete "'.s:file.'"' |
      \ endif |
      \ unlet s:file

" Create new plugin file
function! s:NewPlugin()
  echohl String | let text = input('Plugin name: ') | echohl None
  if text ==# '' | return | endif
  execute 'e ~/.vim/rcplugins/' . text
  execute 'set filetype=vim'
endfunction
command! NewPlugin call <sid>NewPlugin()
"
" Create new vim file
function! s:NewVimFile()
  echohl String | let text = input('File name: ') | echohl None
  if text ==# '' | return | endif
  execute 'e ~/.vim/rcfiles/' . text
  execute 'set filetype=vim'
endfunction
command! NewVimFile call <sid>NewVimFile()

" Handles closing in cases where you would be the last window
function! CloseWindowOnSuccess(code) abort
  if a:code == 0
    let current_window = winnr()
    bdelete!
    " Handles special cases where window remains due startify
    if winnr() == current_window
      close
    endif
  endif
endfunction

" Open autoclosing terminal, with optional size and dir
function! OpenTerm(cmd) abort
  if has('nvim')
    call termopen(a:cmd, {'on_exit': { _, c -> CloseWindowOnSuccess(c) }})
  else
    call term_start(a:cmd, {'exit_cb': {_, c -> CloseWindowOnSuccess(c)}})
  endif
  setf openterm
endfunction

" Open vsplit with animation
function! OpenVTerm(cmd, percent) abort
  if has('nvim')
    vnew
  endif
  call OpenTerm(a:cmd)
  wincmd L | vertical resize 1
  call animate#window_percent_width(a:percent)
endfunction

function! OpenHTerm(cmd, percent) abort
  if has('nvim')
    new
  endif
  call OpenTerm(a:cmd)
  wincmd J | resize 1
  call animate#window_percent_height(a:percent)
endfunction


function! PluginLoaded(name)
  return (
    \ has_key(g:plugs, a:name) &&
    \ isdirectory(g:plugs[a:name].dir) &&
    \ stridx(&runtimepath, g:plugs[a:name].dir) >= 0)
endfunction

" vim:ft=vim
