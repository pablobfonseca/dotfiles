# #!/urs/bin/ruby
snippet #!
	#!/usr/bin/ruby

snippet frozen
	# frozen_string_literal: true
snippet rrh
	require 'rails_helper'
snippet rm
	require 'minitest/autorun'

	class ${1:class}Test < Minitest::Test
		def test_${2:method_name}
		end
	end
snippet =b
	=begin rdoc
		${1}
	=end
snippet def
	def ${1:method_name}
		${2}
	end

snippet defi
	def initialize(${1:args})

	end

# Conditionals
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
# Classes
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end

snippet cla class .. < Test::Unit::TestCase ... end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < Test::Unit::TestCase
		${2}
	end

snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end


	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end


	end
snippet cla class .. < ApplicationController .. end
	class ${1} < ApplicationController

	end
snippet cla class .. < ActiveRecord::Base .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ActiveRecord::Base}

	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module_function

		${2}
	end
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
snippet desc describe .. end
	describe "${2:method}" do
		it "${3:docstring}"
	end

snippet desc describe .. end
	describe ${1:Klass} do
	end

snippet it it .. end
	it '${1:something}' do

	end
snippet exp expect block end
	expect {
		${1:tested_value}
	}.to change(${2:expected_value}).to(${3:changed_value})
snippet exp expect .. end
	expect(${1:tested_value}).to eq(${2:expected_value})
snippet feat feature .. end
	feature '${1:something}' do

	end
snippet scen scenario .. end
	scenario '${1:something}' do

	end
snippet deb p method(:method).source_location
	p method(:${1:method_name}).source_location
snippet pry
	require 'pry'; binding.pry
snippet bug
	require 'byebug'; byebug

snippet let
	let(:${1:name}) { double(:${1:name}) }
