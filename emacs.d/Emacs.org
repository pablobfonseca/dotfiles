#+TITLE: @pablobfonseca's Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
- [[#startup-performance][Startup Performance]]
- [[#tips-for-use][Tips for Use]]
- [[#package-management][Package Management]]
  - [[#straightel][straight.el]]
  - [[#load-exec-path][Load exec-path]]
:END:

* Welcome to my Personal Emacs Config
This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

* Startup Performance
  Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time

  Turn on ~lexical-binding~ for the init file!
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s seconds with %d garbage collections."
                       (emacs-init-time "%.2f")
                       gcs-done)))
#+end_src

* Tips for Use
If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= to open the link in your web browser.
 
* Package Management
Set up ELPA, MELPA and Org package repositories and load =use-package= to manage package configuration.
*NOTE:* Disabling tangling to test =straight.el=

#+begin_src emacs-lisp :tangle no
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src
** straight.el
#+begin_src emacs-lisp :tangle ./early-init.el
  (setq package-enable-at-startup nil)

#+end_src

#+begin_src emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-use-package-by-default t)

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)
#+end_src

Sometimes it's good to clean up the unused repositories if I've removed packages from my configuration. Use ~straight-remove-unused-repos~ for this purpose.

** use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure t)
#+end_src
** Load exec-path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
  :straight t
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
    #+end_src
* Keep .emacs.d Clean
I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering
    :straight t)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src
** Backup files
#+begin_src emacs-lisp
  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src
* Default Coding System
Avoid constant errors about the encoding system by setting the default to UTF-8
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src
* Server mode
  Start the Emacs server from this instance so that all ~emacsclient~ calls are routed here.
#+begin_src emacs-lisp
  (server-start)
#+end_src

* Keybindings Configuration
** Global keybindings
#+begin_src emacs-lisp
  ;; Align your code in a pretty way
  (global-set-key (kbd "C-x \\") 'align-regexp)

  ;; Font size
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  ;; Window switching. (C-x o goes to the next window)
  (global-set-key (kbd "C-x O") (lambda ()
                                  (interactive)
                                  (other-window -1))) ;; back one

  ;; Start vterm or switch to it if it's active
  (global-set-key (kbd "C-x m") 'vterm)

  ;; replace buffer-menu with ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** EscCancels All
#+begin_src emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
** Rebing C-u
Re-bind =C-M-u= for =universal-argument= since =evil-mode= takes over =C-u= for buffer scrolling.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Let's Be Evil

Some tips can be found here:
[[https://github.com/noctuid/evil-guide][https://github.com/noctuid/evil-guide]]
[[https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html][https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html]]

  This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  (defun personal/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (defun personal/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :straight t
    :init
    (global-undo-tree-mode 1)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :hook (evil-mode . personal/evil-hook)
    :config
    (add-hook 'evil-mode-hook 'personal/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode-buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    ;; Define new key bindings for projectile
    (define-key evil-normal-state-map (kbd "M-p") 'projectile-switch-project)
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)

    ;; Disable arrow keys in normal and visual modes
    (define-key evil-normal-state-map (kbd "<left>") 'personal/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>") 'personal/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>") 'personal/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>") 'personal/dont-arrow-me-bro)

    (evil-global-set-key 'motion (kbd "<left>") 'personal/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'personal/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'personal/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'personal/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-matchit
    :straight t
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init)
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))
#+end_src

*** evil-multiedit
#+begin_src emacs-lisp
  ;; (use-package evil-multiedit
  ;;   :straight t
  ;;   :config
  ;;   (define-key evil-normal-state-map (kbd "C-n") 'evil-multiedit-match-and-next)
  ;;   (define-key evil-visual-state-map (kbd "C-n") 'evil-multiedit-match-and-next))

  (use-package multiple-cursors
    :straight t
    :config
    (define-key evil-normal-state-map (kbd "C-n") 'mc/mark-next-like-this)
    (define-key evil-visual-state-map (kbd "C-n") 'mc/mark-next-like-this))

#+end_src

*** evil-surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :straight t
    :config
    (global-evil-surround-mode 1))
#+end_src

** Keybinding Panel (which-key)

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Simplify Leader Bindings (general.el)

#+begin_src emacs-lisp

  (use-package general
    :straight t
    :config
    (general-create-definer personal/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (personal/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "tw" 'whitespace-mode
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

* General Configuration
** User Interface
Make Emacs more minimal
#+begin_src emacs-lisp
  ;; Open emacs maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)              ; Disable visible scrollbar
  (tool-bar-mode -1)                ; Disable the toolbar
  (tooltip-mode -1)                 ; Disable the tooltips
  (set-fringe-mode 10)              ; Give some breathing room
  (menu-bar-mode -1)                ; Disable the menu bar
  (setq ring-bell-function 'ignore) ; Ignore bell
  (setq display-line-numbers-type 'relative) ; Relative line numbers

  ;; nice scrolling
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

  ;; remap scroll-other-window
  (global-set-key (kbd "C-M-e") 'scroll-other-window)
  (global-set-key (kbd "C-M-y") 'scroll-other-window-down)

  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Highlight current line
  (global-hl-line-mode 1)
#+end_src

Enable line numbers and customize their format.

#+begin_src emacs-lisp
(column-number-mode)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Don't warn for large files
#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
#+end_src

Don't warn for following symlinked files
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src
** Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :straight t
    :defer t
    :init (load-theme 'doom-dracula t))

#+end_src

** Font
*** Set the font

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "FiraCode Nerd Font" :family "Retina" :height 190)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :family "Retina" :height 190)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 190 :weight 'normal)
#+end_src

*** Enable proper Unicode glyph support
#+begin_src emacs-lisp
(defun personal/replace-unicode-font-mapping (block-name old-font new-font)
  (let* ((block-idx (cl-position-if
                         (lambda (i) (string-equal (car i) block-name))
                         unicode-fonts-block-font-mapping))
         (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
         (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
    (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
          `(,updated-block))))

(use-package unicode-fonts
  :straight t
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  :config
  ;; Fix the font mappings to use the right emoji font
  (mapcar
    (lambda (block-name)
      (personal/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
    '("Dingbats"
      "Emoticons"
      "Miscellaneous Symbols and Pictographs"
      "Transport and Map Symbols"))
  (unicode-fonts-setup))
 #+end_src
 
*** Emojis in buffers
#+begin_src emacs-lisp
  ;; Enable emoji, and stop the UI from freezing when trying to display them
  (when (fboundp 'set-fontset-font)
    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))

  (use-package emojify
    :straight t
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
#+end_src

** Mode Line
*** Basic Customization
#+begin_src emacs-lisp
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)
#+end_src
*** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.
#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src

*** Smart Mode Line
Prettify the modeline with [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]. Really need to re-evaluate the ordering of =mode-line-format=. Also not sure if =rm-excluded-modes= is needed anymore if I set up =diminish= correctly.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t
    :disabled
    :config
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'respectful)  ; Respect the theme colors
    (setq sml/mode-width 'right
          sml/name-width 60)

    (setq-default mode-line-format
                  `("%e"
                    ,(when personal/exwm-enabled
                       '(:eval (format "[%d] " exwm-workspace-current-index)))
                    mode-line-front-space
                    evil-mode-line-tag
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification
                    sml/pos-id-separator
                    (vc-mode vc-mode)
                    " "
                                          ;mode-line-position
                    sml/pre-modes-separator
                    mode-line-modes
                    " "
                    mode-line-misc-info))

    (setq rm-excluded-modes
          (mapconcat
           'identity
                                          ; These names must start with a space!
           '(" GitGutter" " MRev" " company"
             " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
             " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
           "\\|")))
#+end_src

*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing the package!

  (use-package all-the-icons
    :straight t)

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 14))
#+end_src

** Auto-Reverting Changed Files
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** Highlight Matching Braces
#+begin_src emacs-lisp
  (use-package paren
    :straight t
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src
* Editing Configuration
** Tab Widths
Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

** Hippie Expand
#+begin_src emacs-lisp
  ;; hippie expand is dabbrev expand on steroids
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-listp-symbol-partially
                                           try-complete-listp-symbol))

#+end_src

** Use spaces instead of tabs for indentation
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** Commenting
Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :straight t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Automatically clean whitespace
#+begin_src emacs-lisp
  (use-package ws-butler
    :straight t
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Editor Config
#+begin_src emacs-lisp
  (use-package editorconfig
    :straight t
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

** Origami.el for Folding
#+begin_src emacs-lisp
  (use-package origami
    :straight t)
#+end_src

** expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind ("C-=" . er/expand-region))
#+end_src

* Configuration Files
** Configuration file management with dotcrafter.el
#+begin_src emacs-lisp
  (use-package dotcrafter
    :straight '(dotcrafter :host github
                           :repo "daviwil/dotcrafter.el"
                           :branch "main")
    :custom
    (dotcrafter-dotfiles-folder "~/.emacs.d")
    (dotcrafter-org-files '("Emacs.org")))
#+end_src
** Helpers
#+begin_src emacs-lisp
  (defun personal/org-file-jump-to-heading (org-file heading-title)
    (interactive)
    (find-file (expand-file-name org-file))
    (goto-char (point-min))
    (search-forward (concat "* " heading-title))
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

  (defun personal/org-file-show-headings (org-file)
    (interactive)
    (find-file (expand-file-name org-file))
    (counsel-org-goto)
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))
#+end_src
** Bindings
#+begin_src emacs-lisp
  (personal/leader-keys
    "f"  '(:ignore t :which-key "dotfiles")
    "fe" '((lambda () (interactive) (find-file "~/.emacs.d/Emacs.org")) :which-key "edit config")
    "fz" '((lambda () (interactive) (find-file "~/.emacs.d/Zsh.org")) :which-key "edit zsh config")
    "fv" '((lambda () (interactive) (find-file "~/.emacs.d/Vim.org")) :which-key "edit vim config"))
#+end_src
* UI Configuration
** Command Log Mode
[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :straight t)
#+end_src
** Helpful Help Command

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** Text Scaling


This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :defer 1)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (personal/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
* Ivy and Counsel

-  While in an Ivy minibuffer, you can search within the current results by using =S-Space=
-  To quickly jump to an item in the minibuffer, use =C-'= to get Ivy line jump keys.
-  To see actions for the selected minibuffer item, use =M-o= and then press the action's key
-  *Super useful*: Use =C-c C-o= to open =ivy-occur= to open the search results in a separated buffer. From there you can click any item to perform the ivy action.

#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)


    ;; Set minibuffer heght for different commands
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  (use-package ivy-rich
    :straight t
    :init
    (ivy-rich-mode 1)
    :after counsel
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))))))  ; return file path relative to project root or `default-directory' if project is nil

  (use-package counsel
    :straight t
    :bind (("M-x" . counsel-M-x)
           ("C-M-j" . counsel-switch-buffer)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1)
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  ;; Improves sorting for fuzzy-matched results
  (use-package flx
    :straight t
    :after ivy
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (use-package wgrep
    :straight t)

  (use-package ivy-posframe
    :straight t
    :disabled
    :custom
    (ivy-posframe-width 115)
    (ivy-posframe-min-width 115)
    (ivy-posframe-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
                                    (left-fringe . 8)
                                    (right-fringe . 8)))
    (ivy-posframe-mode 1))

  (personal/leader-keys
    "r" '(ivy-resume :which-key "ivy resume")
    "f" '(:ignore t :which-key "files")
    "ff" '(counsel-find-file :which-key "open file")
    "C-f" 'counsel-find-file
    "fr" '(counsel-recentf :which-key "recent files")
    "fR" '(revert-buffer :which-key "revert file")
    "fj" '(counsel-file-jump :which-key "jump to file"))

  (use-package swiper
    :straight t
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+end_src
* Jumping with Avy
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

  (personal/leader-keys
    "j" '(:ignore t :which-key "jump")
    "jj" '(avy-goto-char :which-key "jump to char")
    "jw" '(avy-goto-word-0 :which-key "jump to word")
    "jl" '(avy-goto-line :which-key "jump to line"))
#+end_src
* Window Management
** Frame Scaling / Zooming
The keybindings for this are =C+M+-= and =C+M+==
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :defer 1
    :config
    (default-text-scale-mode))
#+end_src
** Window Selection with ace-window
=ace-window= helps with easily switching between windows based on a predefined set of keys used to identify each.
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))
#+end_src
** Transpose Frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :straight t)
#+end_src
** Set Margins for Modes
#+begin_src emacs-lisp
  (defun personal/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :defer t
    :hook (org-mode . personal/org-mode-visual-fill))
#+end_src
* File Browsing
** Dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :straight t)

  (use-package dired
    :ensure nil
    :straight nil
    :defer 1
    :commands (dired dired-jump)
    :config
    (when (string= system-type "darwin")
      (setq dired-use-ls-dired nil))
    (setq dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-hide-details-hide-symlinks-targets nil)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (dired-hide-details-mode 1)
                (all-the-icons-dired-mode 1)
                (hl-line-mode 1)))

    (use-package dired-rainbow
      :straight t
      :defer 2
      :config
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

    (use-package dired-single
      :straight t
      :defer t)

    (use-package dired-collapse
      :straight t
      :defer t))

#+end_src

*** Navigation
*Emacs / Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other"  window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g= =o= - Open file but in a "preview" mode, close with =q=
* Org Mode


[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =personal/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

(defun personal/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp

  (defun personal/org-mode-setup ()
    (org-indent-mode)
    (flyspell-mode)
    (visual-line-mode 1)
    (setq org-src-tab-acts-natively t))

  (use-package org
    :straight f
    :hook (org-mode . personal/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-hide-emphasis-markers t)
    (setq org-agenda-files
          '("~/Dropbox/Study/Emacs/OrgFiles/Tasks.org"
            "~/Dropbox/Study/Emacs/OrgFiles/Habit.org"
            "~/Dropbox/Study/Emacs/OrgFiles/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(@a/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)
            ("thinking" . ?t)
            ("recurring" . ?r)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Dropbox/Study/Emacs/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Dropbox/Study/Emacs/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Dropbox/Study/Emacs/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Dropbox/Study/Emacs/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Dropbox/Study/Emacs/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c c")
      (lambda () (interactive) (org-capture)))

    (personal/org-font-setup)
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] .

#+begin_src emacs-lisp

  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("lua" . "src lua"))
(add-to-list 'org-structure-template-alist '("ruby" . "src ruby"))
(add-to-list 'org-structure-template-alist '("vimrc" . "src vimrc"))

#+end_src

** Auto-Tangle Configuration Files

Handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate programming.

#+begin_src emacs-lisp
  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun personal/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'personal/org-babel-tangle-dont-ask
                                                'run-at-end 'only-in-org-mode)))
#+end_src

** Bindings
#+begin_src emacs-lisp
  (fset 'evil-redirect-digit-argument 'ignore) ;; before evil-org loaded

  (add-to-list 'evil-digit-bound-motions 'evil-org-beginning-of-line)
  (evil-define-key 'motion 'evil-org-mode
    (kbd "0") 'evil-org-beginning-of-line)

  (use-package evil-org
    :straight t
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (personal/leader-keys
    "o" '(:ignore t :which-key "org mode")
    "oi" '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")
    "on" '(org-toggle-narrow-to-subtree :which-key "toggle narrow")
    "oa" '(org-agenda :which-key "status")
    "ot" '(org-todo-list :which-key "todos")
    "oc" '(org-capture t :which-key "capture")
    "ox" '(org-export-dispatch t :which-key "export")))

#+end_src
* Development
** tree-sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :straight t
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :straight t
  :after tree-sitter)
#+end_src
** auto-format
#+begin_src emacs-lisp
  (use-package apheleia
    :straight t
    :config
    (apheleia-global-mode +1))
#+end_src
** Compile mode
#+begin_src emacs-lisp
  (defvar *compile-command-map* '(("py" . "python")
                                  ("go" . "go run")
                                  ("rb" . "ruby")
                                  ("js" . "node")))

  (defun ~run-current-file (f command-map)
    "Run command map with function f
    f can be: compile, ~acme$, ~acme&, ~acme!"
    (interactive)
    (save-buffer)

    (let* ((fname (s-chop-suffix (car (s-match "<.*>" (buffer-name))) (buffer-name)))
           (suffix (file-name-extension fname))
           (prog (cdr (assoc suffix command-map))))
      (if (null prog)
          (error "Extension is not yet registered")
        (funcall f (format "%s %s" prog (shell-quote-argument fname))))))

  (defun ~compile-current-file ()
    "(re)compile the current file. A replacement for compile with automatic filetype recognition.
                                e.g. If the current buffer is hello.py, then it'll call python hello.py"
    (interactive)
    (save-buffer)
    (~run-current-file 'compile *compile-command-map*))

  ;; default compile command to empty string
  (setq compile-command "")

  (defun ~recompile ()
    "custom recompile "
    (interactive)
    (save-buffer)
    (recompile))

  (defvar *test-command-map* '(("py" . "pytest -s -v")
                               ("go" . "go test")))

  (defun ~test-current-file ()
    "Test current file using 'compile'. Automatic filetype recogntion.
      e.g. If the current buffer is hello.py, then it'll call pytest hello.py
      "
    (interactive)
    (~run-current-file 'compile *test-command-map*))

  (personal/leader-keys
    "c" '(:ignore t :which-key "compile")
    "cc" '(~compile-current-file :which-key "compile current file")
    "ct" '(~test-current-file :which-key "test current file"))
#+end_src
** Git
*** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-M-;" . magit-status)
    :commands (magit-status)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (personal/leader-keys
    "g" '(:ignore t :which-key "git")
    "gs" 'magit-status
    "gd" 'magit-diff-unstaged
    "gc" 'magit-branch-or-checkout
    "gl" '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb" 'magit-branch
    "gP" 'magit-push-current
    "gp" 'magit-pull-branch
    "gf" 'magit-fetch
    "gF" 'magit-fetch-all
    "gr" 'magit-rebase)

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#+end_src

*** Forge
#+begin_src emacs-lisp
  (use-package forge
    :straight t)
#+end_src

*** magit-todos
This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo. More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].
#+begin_src emacs-lisp
  (use-package magit-todos
    :straight t
    :defer t)
#+end_src
*** git-link
#+begin_src emacs-lisp
  (use-package git-link
    :straight t
    :commands git-link
    :config
    (setq git-link-open-in-browser t)
    (personal/leader-keys
      "gL" 'git-link))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :straight git-gutter-fringe
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2)
    (require 'git-gutter-fringe)
    (set-face-foreground 'git-gutter-fr:added "LightGreen")
    (fringe-helper-define 'git-gutter-fr:added nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:modified "LightGoldenrod")
    (fringe-helper-define 'git-gutter-fr:modified nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    (set-face-foreground 'git-gutter-fr:deleted "LightCoral")
    (fringe-helper-define 'git-gutter-fr:deleted nil
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      ".........."
      ".........."
      "XXXXXXXXXX"
      "XXXXXXXXXX"
      "XXXXXXXXXX")

    ;; These characters are used in terminal mode
    (setq git-gutter:modified-sign "≡")
    (setq git-gutter:added-sign "≡")
    (setq git-gutter:deleted-sign "≡")
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))
#+end_src
** Languages

*** Language Server Support
**** lsp-mode
#+begin_src emacs-lisp

  (defun personal/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :straight t
    :commands lsp
    :hook (lsp-mode . personal/lsp-mode-setup)
    :config
    (define-key evil-normal-state-map (kbd ",ra") 'lsp-rename)

    (lsp-enable-which-key-integration t)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (personal/leader-keys
    "l" '(:ignore t :which-key "lsp")
    "ld" 'lsp-find-definition
    "lr" 'lsp-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lx" 'lsp-execute-code-action)

#+end_src
**** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (define-key evil-normal-state-map (kbd "H") 'lsp-ui-doc-glance)
    (setq lsp-ui-doc-position 'at-point))
#+end_src
**** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :straight t)
#+end_src
****
*** Ruby
#+begin_src emacs-lisp
  (use-package ruby-mode
    :mode ("\\.rb\\'" "Rakefile\\'" "Gemfile\\'")
    :hook (ruby-mode . lsp)
    :interpreter "ruby"
    :config
    (setq ruby-insert-encoding-magic-comment nil)
    (add-hook 'ruby-mode-hook (lambda () (rvm-activate-corresponding-ruby)))
    :bind (:map ruby-mode-map
                ("\C-c r r" . inf-ruby)))

  (use-package bundler
    :straight t)
  (use-package rvm
    :straight t)

  (use-package inf-ruby
    :straight t
    :hook (ruby-mode . inf-ruby-minor-mode))

  (use-package rbs-mode
    :straight t)
#+end_src
**** Robe
#+begin_src emacs-lisp
  (use-package robe
    :straight t
    :hook (ruby-mode . robe-mode)
    :bind ("C-M-." . robe-jump)
    :config
    (defadvice inf-ruby-console-auto (before activate-rvm-for-robe activate)
      (rvm-activate-corresponding-ruby)))
#+end_src
**** Rubocop
#+begin_src emacs-lisp
  (use-package rubocop
    :straight t)
#+end_src
**** rspec-mode
#+begin_src emacs-lisp
  (use-package rspec-mode
    :straight t
    :after ruby-mode
    :init
    (progn
      (setq rspec-use-spring-when-possible nil)
      (setq rspec-use-rake-flag nil))
    :config
    (setq rspec-use-rvm t)
    (add-hook 'after-init-hook 'inf-ruby-switch-setup))
#+end_src

*** Python

#+begin_src emacs-lisp
  (use-package python-mode
    :straight t
    :hook (python-mode . lsp))

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
                          #+end_src
**** pyvenv
#+begin_src emacs-lisp
  (use-package pyvenv
    :straight t
    :hook (python-mode . pyvenv-mode))
#+end_src
*** Typescript and JavaScript
Set up nvm so that we can manage Node versions
#+begin_src emacs-lisp
  (use-package nvm
    :straight t)
#+end_src

  This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.


#+begin_src emacs-lisp
  (use-package typescript-mode
    :after tree-sitter
    :mode (("\\.tsx?\\'" . typescript-mode)
           ("\\.tsx\\'" . rjsx-mode))
    :hook (typescript-mode . lsp)
    :config
    (define-derived-mode typescriptreact-mode typescript-mode
      "TypeScript TSX")

    ;; use our derived mode for tsx files
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
    ;; by default, typescript-mode is mapped to the treesitter typescript parser
    ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx))
    (setq typescript-indent-level 2))

  (defun personal/set-js-indentation ()
    ;; electric-layout-mode doesn't play nice with smartparens
    (setq-local electrict-layout-rules '((?\{ . around) (?\} . around)))
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :straight t
    :hook (js2-mode . lsp)
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavascScript and JSON files
    (add-hook 'js2-mode-hook #'personal/set-js-indentation))

  (use-package json-mode
    :straight t
    :config
    (add-hook 'json-mode-hook #'personal/set-js-indentation))
#+end_src

**** Indium
#+begin_src emacs-lisp
  (use-package indium
    :straight t)
#+end_src
*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked")
    (defun personal/set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))
        (defun personal/markdown-mode-hook ()
          (personal/set-markdown-header-font-sizes))
    (add-hook 'markdown-mode-hook 'personal/markdown-mode-hook))
#+end_src
*** HTML (web mode)
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq web-mode-enable-auto-pairing nil)
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-css-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (setq-default web-mode-attr-indent-offset 2))
#+end_src
**** Impatient mode
#+begin_src emacs-lisp
  ;; 1. Start the server with `httpd-start`
  ;; 2. Use `impatient-mode` on any buffer
  (use-package impatient-mode
    :straight t)
#+end_src
**** CSS
#+begin_src emacs-lisp
(use-package css-mode
  :hook (css-mode . lsp)
  :config
  (setq-default css-indent-offset 2))
#+end_src
**** HAML
#+begin_src emacs-lisp
  (use-package haml-mode
    :straight t)
#+end_src
**** Emmet mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :straight t
    :diminish (emmet-mode . "ε")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :custom
    (emmet-indentation 2)
    (emmet-move-cursor-between-quotes t)
    :mode
    (("\\.html$\\'" . emmet-mode)
     ("\\.xml\\'" . emmet-mode)
     ("\\.erb\\'" . emmet-mode))
    :init
    ;; Auto-start on any markup modes
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode))
#+end_src

*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+end_src
*** Go
#+begin_src emacs-lisp
  (defun personal/go-mode-defaults ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t)
    (add-hook 'go-mode-hook #'lsp-deferred)
    (define-key 'help-command (kbd "G") 'godoc)

    (setq tab-width 4)
    (setq evil-shift-width tab-width)

    ;; Prefer goimports to gofmt if installed
    (let ((goimports (executable-find "goimports")))
      (when goimports
        (setq gofmt-command goimports)))

    ;; gofmt on save
    (add-hook 'before-save-hook 'gofmt-before-save nil t))

  (use-package go-mode
    :straight t
    :defer t
    :hook (go-mode . lsp)
    :config
    (add-hook 'go-mode-hook #'personal/go-mode-defaults))
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :hook (rust-mode . lsp)
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo
    :straight t
    :defer t)
#+end_src
*** Haskell
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :straight t
    :defer t)

  (use-package haskell-mode
    :straight t
    :config
    (add-hook 'haskell-mode-hook #'lsp)
    (add-hook 'haskell-literate-mode-hook #'lsp))
#+end_src
*** Elm
#+begin_src emacs-lisp
  (use-package elm-mode
    :straight t
    :config
    (setq elm-format-on-save t))
#+end_src
*** OCaml/ReasonML

#+begin_src emacs-lisp
  (use-package caml
    :straight t)

  (use-package tuareg
    :hook (tuareg-mode . lsp)
    :mode ("\\.ml[ily]?$" . tuareg-mode)
    :straight t)

  ;; (use-package merlin
  ;;   :straight t
  ;;   :custom
  ;;   (merlin-completion-with-doc t)
  ;;   :bind (:map merlin-mode-map
  ;;               ("M-." . merlin-locate)
  ;;               ("M-," . merlin-pop-stack)
  ;;               ("M-?" . merlin-occurrences)
  ;;               ("C-c C-j" . merlin-jump)
  ;;               ("C-c i" . merlin-locate-ident)
  ;;               ("C-c C-e" . merlin-iedit-occurrences))
  ;;   :hook
  ;;   ;; Start merlin on ml files
  ;;   ((reason-mode tuareg-mode caml-mode) . merlin-mode))

  (use-package utop
    :custom
    (utop-edit-command nil)
    :hook
    (tuareg-mode . (lambda ()
                     (setq utop-command "utop -emacs")
                     (utop-minor-mode)))
    (reason-mode . (lambda ()
                     (setq utop-command "rtop -emacs")
                     (setq utop-prompt
                           (lambda ()
                             (let ((prompt (format "rtop[%d]> " utop-command-number)))
                               (add-text-properties 0 (lenght prompt) '(face utop-prompt) prompt)
                               prompt)))
                     (utop-minor-mode)))
    :straight t)

  (defun shell-cmd (cmd)
    "Returns the stdout output of a shell command or nil if the command returned an error"
    (car (ignore-errors (apply 'process-lines (split-string cmd)))))

  (setq opam-p (shell-cmd "which opam"))
  (setq reason-p (shell-cmd "which refmt"))

  (use-package reason-mode
    :straight t
    :if reason-p
    :config
    (add-hook 'reason-mode-hook (lambda ()
                                  (add-hook 'before-save-hook #'refmt-before-save)))
    (let* ((refmt-bin (or (shell-cmd "refmt ----where")
                          (shell-cmd "which refmt")))
           (merlin-bin (or (shell-cmd "ocamlerlin ----where")
                           (shell-cmd "which ocamlmerlin")))
           (merlin-base-dir (when merlin-bin
                              (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
      ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlerlin
      (when merlin-bin
        (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
        (setq merlin-command merlin-bin))
      (when refmt-bin
        (setq refmt-command refmt-bin)))
    )
#+end_src
*** vimrc
#+begin_src emacs-lisp
  (use-package vimrc-mode
    :straight t)
#+end_src
*** lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t)
#+end_src
** Copilot
#+begin_src emacs-lisp
  (use-package s
    :straight (:host github :repo "magnars/s.el");; :files ("s.el"))
    :ensure t)

  (use-package dash
    :straight (:host github :repo "magnars/dash.el");; :files ("dash.el"))
    :ensure t)

  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :bind (:map copilot-completion-map
                ("M-l" . 'copilot-accept-completion)
                ("<tab>" . 'copilot-accept-completion)
                ("TAB" . 'copilot-accept-completion)
                ("C-TAB" . 'copilot-accept-completion-by-word)
                ("C-<tab>" . 'copilot-accept-completion-by-word)))

  (dolist (mode '(prog-mode-hook
                  org-mode-hook))
    (add-hook mode 'copilot-mode))
#+end_src
** Productivity
*** Syntax checking with Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))
#+end_src
*** Smart Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :hook (prog-mode . smartparens-mode))
#+end_src
*** Rainbow Mode
Sets the background of HTML tags color strings in buffers to be the color mentioned.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))
#+end_src
** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp


  (use-package projectile
    :straight t
    :diminish projectile-mode
    :bind
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder you keep your git repos
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code"))))
    ;; (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

 #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :straight t
     :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** RESTClient Mode
#+begin_src emacs-lisp
  (use-package restclient
    :straight t
    :mode ("\\.http\\'" . restclient-mode))
#+end_src
* Terminals
** term-mode
#+begin_src emacs-lisp
  (use-package term
    :straight t
    :config
    (setq explicit-shell-file-name "zsh"))
#+end_src
*** For better color support
Make sure the =tic= program is available on your machine (could be part of =ncurses= package).
#+begin_src emacs-lisp
  (use-package eterm-256color
    :straight t
    :hook (term-mode . eterm-256color-mode))
#+end_src
** vterm
=vterm= enables the use of fully-fledged terminal applications within Emacs so that I don’t need an external terminal emulator.

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src
** shell-mode
** Eshell
#+begin_src emacs-lisp
  (defun personal/configure-eshell()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performace
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :straight t)

  (use-package eshell
    :hook (eshell-first-time-mode . personal/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

Tip: If you want to write the output of a command into a buffer you can do something like:
#+begin_example
echo "Hello!" > #<buffer test-buffer>
#+end_example
*** Toggling Eshell
~eshell-toggle~ allows me to toggle an Eshell window below the current buffer for the path (or project path) of the buffer.
#+begin_src emacs-lisp
  (use-package eshell-toggle
    :straight t
    :bind ("C-x C-t" . eshell-toggle)
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-project-root t)
    (eshell-toggle-run-command nil))
#+end_src

* System Utilities
** Docker
#+begin_src emacs-lisp
  (use-package docker
    :straight t
    :commands docker)

  (use-package dockerfile-mode
    :straight t
    :config
    (require 'dockerfile-mode)
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (use-package ripgrep
    :straight t)

  (use-package deadgrep
    :straight t)
#+end_src
* Tools
** Crux
#+begin_src emacs-lisp
  (use-package crux
    :straight t)
#+end_src
